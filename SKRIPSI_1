from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.models import Sequential
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

img = image.load_img("D:PetImages/training/Doberman/12.jpg")
plt.imshow(img)

cv2.imread("D:PetImages/training/Doberman/12.jpg").shape

train = ImageDataGenerator(rescale=1./255)
validation = ImageDataGenerator(rescale=1./255)

train_dataset = train.flow_from_directory('D:PetImages/training/',
                                          target_size = (128,128),
                                          batch_size = 3,
                                          class_mode = 'categorical')

validation_dataset = validation.flow_from_directory('D:PetImages/validation/',
                                                    target_size = (128,128),
                                                    batch_size = 3,
                                                    class_mode = 'categorical')

train_dataset.class_indices

model = Sequential()
model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation = 'relu',input_shape = (128,128,3)),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Conv2D(32,(3,3),activation = 'relu'),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Conv2D(64,(3,3),activation = 'relu'),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Flatten(),
                                   tf.keras.layers.Dense(512,activation = 'relu'),
                                   tf.keras.layers.Dense(3,activation = 'softmax')])

model.summary()

model.compile(loss = 'categorical_crossentropy',
              optimizer = tf.optimizers.Adam(),
              metrics = ['accuracy'])

model_fit = model.fit(train_dataset,
                     steps_per_epoch = 3,
                     epochs = 5,
                     validation_data = validation_dataset,
                     verbose = 2)

dir_path = 'D:PetImages/testing'

for i in os.listdir(dir_path):
    img = image.load_img(dir_path+'//'+i, target_size=(128,128))
    plt.imshow(img)
    plt.show()
    
    X = image.img_to_array(img)
    X = np.expand_dims(X, axis=0)
    images = np.vstack([X])
    val = model.predict(images, batch_size=3)
    
    print(dir_path)
    if val[0][0]==1:
        print("Anjing Doberman")
    elif val[0][1]==1:
        print("Anjing Rottweiler")
    elif val[0][2]==1:
        print("Anjing Siberian Husky")
    else:
        print("Unknown")
